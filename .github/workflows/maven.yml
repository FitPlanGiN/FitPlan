# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: SpringBoot CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Build and push images using spring-boot:build-image
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        mvn clean spring-boot:build-image -DskipTests

    - name: Building and pushing fitplanfrontend
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/fitplanfrontend:latest .
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push ${{ secrets.DOCKER_USERNAME }}/fitplanfrontend:latest
      working-directory: fitplanfrontend

    # Google Cloud login using Service Account Key
    - name: Google Cloud authentication
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    # Get GKE credentials
    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: 'fitplan'
        location: 'europe-central2-a'

    # Set Kubernetes context
    - name: Set up kubectl
      run: |
        kubectl config use-context gke_${{ secrets.PROJECT_ID }}_europe-central2-a_fitplan

    # Deploy manifests to GKE
    #- name: Deploy manifests to GKE
    #  run: |
     #   kubectl apply -f ./k8s/manifests/infrastructure
      #  kubectl apply -f ./k8s/manifests/applications

      
    # Deploy infrastructure manifests first
    - name: Deploy infrastructure to GKE
      run: |
        kubectl apply -f ./k8s/manifests/infrastructure
        kubectl wait --for=condition=ready pod --all --namespace=default --timeout=600s
    
    # Deploy config server (must be deployed first in applications)
    - name: Deploy Config Server to GKE
      run: |
        kubectl apply -f ./k8s/manifests/applications/configserver
        kubectl wait --for=condition=ready pod --selector=app=configserver --namespace=default --timeout=600s
    
    # Deploy the rest of the applications
    - name: Deploy remaining applications to GKE
      run: |
        kubectl apply -f ./k8s/manifests/applications
        
        

