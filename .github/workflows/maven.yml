name: SpringBoot CI/CD Pipeline (Helm)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

    #  - name: Build and push images using spring-boot:build-image
       # env:
       #   DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      #  run: |
       #   mvn clean spring-boot:build-image -DskipTests
  
      #- name: Building and pushing fitplanfrontend
       # run: |
        #  docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/fitplanfrontend:latest .
         # echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
         # docker push ${{ secrets.DOCKER_USERNAME }}/fitplanfrontend:latest
       # working-directory: fitplanfrontend          

      - name: Google Cloud authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: 'fitplan'
          location: 'europe-central2-a'

      - name: Set up kubectl
        run: |
          kubectl config use-context gke_${{ secrets.PROJECT_ID }}_europe-central2-a_fitplan

      - name: Set up Helm
        uses: azure/setup-helm@v3

      # Cleanup existing PVC and PV (if any)
      - name: Cleanup MySQL PVC and PV
        run: |
          kubectl delete pvc mysql-pvc --ignore-not-found
          kubectl delete pv mysql-pv --ignore-not-found

    # Create a Persistent Disk for MySQL
    #- name: Create GCE Persistent Disk for MySQL
     # run: |
      #  gcloud compute disks create mysql-disk --size=10Gi --zone=europe-central2-a

      - name: Delete existing MySQL disk (if any)
        run: |
          if gcloud compute disks describe mysql-disk --zone=europe-central2-a > /dev/null 2>&1; then
            gcloud compute disks delete mysql-disk --zone=europe-central2-a --quiet
          else
            echo "MySQL disk not found, skipping deletion."
          fi

      - name: Check if MySQL disk exists
        run: |
          if ! gcloud compute disks describe mysql-disk --zone=europe-central2-a > /dev/null 2>&1; then
            gcloud compute disks create mysql-disk --size=10Gi --zone=europe-central2-a
          else
            echo "MySQL disk already exists, skipping creation."
          fi

      # Remove conflicting secrets (if necessary)
    #  - name: Remove existing secrets
       # run: |
       #   kubectl delete secret fitplan-helm-secrets --ignore-not-found

      - name: Uninstall existing common-config
        run: |
          helm uninstall common-config || echo "common-config release does not exist."

      - name: Deploy common-config
        run: |
          helm install common-config ./fitplan-helm/charts/common-config --wait

      - name: Uninstall existing configserver
        run: |
          helm uninstall configserver || echo "configserver release does not exist."

      - name: Deploy configserver
        run: |
          helm install configserver ./fitplan-helm/charts/configserver --wait

      - name: Uninstall existing mysql
        run: |
          helm uninstall mysql || echo "mysql release does not exist."

      - name: Deploy mysql
        run: |
          helm install mysql ./fitplan-helm/charts/mysql --wait

      - name: Uninstall existing mongodb
        run: |
          helm uninstall mongodb || echo "mongodb release does not exist."

      - name: Deploy mongodb
        run: |
          helm install mongodb ./fitplan-helm/charts/mongodb --wait

      - name: Uninstall existing keycloak-mysql
        run: |
          helm uninstall keycloak-mysql || echo "keycloak-mysql release does not exist."

      - name: Deploy keycloak-mysql
        run: |
          helm install keycloak-mysql ./fitplan-helm/charts/keycloak-mysql --wait

      - name: Uninstall existing zookeeper
        run: |
          helm uninstall zookeeper || echo "zookeeper release does not exist."

      - name: Deploy zookeeper
        run: |
          helm install zookeeper ./fitplan-helm/charts/zookeeper --wait

      - name: Uninstall existing broker
        run: |
          helm uninstall broker || echo "broker release does not exist."

      - name: Deploy broker
        run: |
          helm install broker ./fitplan-helm/charts/broker --wait

      - name: Uninstall existing kafka-ui
        run: |
          helm uninstall kafka-ui || echo "kafka-ui release does not exist."

      - name: Deploy kafka-ui
        run: |
          helm install kafka-ui ./fitplan-helm/charts/kafka-ui --wait

      - name: Uninstall existing schema-registry
        run: |
          helm uninstall schema-registry || echo "schema-registry release does not exist."

      - name: Deploy schema-registry
        run: |
          helm install schema-registry ./fitplan-helm/charts/schema-registry --wait

      - name: Uninstall existing keycloak
        run: |
          helm uninstall keycloak || echo "keycloak release does not exist."

      - name: Deploy keycloak
        run: |
          helm install keycloak ./fitplan-helm/charts/keycloak --wait

      - name: Uninstall existing prometheus
        run: |
          helm uninstall prometheus || echo "prometheus release does not exist."

      - name: Deploy prometheus
        run: |
          helm install prometheus ./fitplan-helm/charts/prometheus --wait

      - name: Uninstall existing loki
        run: |
          helm uninstall loki || echo "loki release does not exist."

      - name: Deploy loki
        run: |
          helm install loki ./fitplan-helm/charts/loki --wait

      - name: Uninstall existing tempo
        run: |
          helm uninstall tempo || echo "tempo release does not exist."

      - name: Deploy tempo
        run: |
          helm install tempo ./fitplan-helm/charts/tempo --wait

      - name: Uninstall existing grafana
        run: |
          helm uninstall grafana || echo "grafana release does not exist."

      - name: Deploy grafana
        run: |
          helm install grafana ./fitplan-helm/charts/grafana --wait

      - name: Uninstall existing exercise
        run: |
          helm uninstall exercise || echo "exercise release does not exist."

      - name: Deploy exercise
        run: |
          helm install exercise ./fitplan-helm/charts/exercise --wait

      - name: Uninstall existing fitplan-ingress
        run: |
          helm uninstall fitplan-ingress || echo "fitplan-ingress release does not exist."

      - name: Deploy fitplan-ingress
        run: |
          helm install fitplan-ingress ./fitplan-helm/charts/fitplan-ingress --wait

      - name: Uninstall existing fitplanfrontend
        run: |
          helm uninstall fitplanfrontend || echo "fitplanfrontend release does not exist."

      - name: Deploy fitplanfrontend
        run: |
          helm install fitplanfrontend ./fitplan-helm/charts/fitplanfrontend --wait

      - name: Uninstall existing gateway
        run: |
          helm uninstall gateway || echo "gateway release does not exist."

      - name: Deploy gateway
        run: |
          helm install gateway ./fitplan-helm/charts/gateway --wait

      - name: Uninstall existing notification
        run: |
          helm uninstall notification || echo "notification release does not exist."

      - name: Deploy notification
        run: |
          helm install notification ./fitplan-helm/charts/notification --wait

      - name: Uninstall existing validation
        run: |
          helm uninstall validation || echo "validation release does not exist."

      - name: Deploy validation
        run: |
          helm install validation ./fitplan-helm/charts/validation --wait

      - name: Uninstall existing workout
        run: |
          helm uninstall workout || echo "workout release does not exist."

      - name: Deploy workout
        run: |
          helm install workout ./fitplan-helm/charts/workout --wait
      # Run frontend connection test
      - name: Run connection test to fitplanfrontend
        run: |
          helm test fitplan-helm --logs
