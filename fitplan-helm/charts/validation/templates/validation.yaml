---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: validation
  template:
    metadata:
      labels:
        app: validation
    spec:
      initContainers:
        - name: wait-for-configserver
          image: busybox
          command: [ 'sh', '-c', 'until nc -z configserver {{ .Values.configserver.port }}; do echo waiting for configserver; sleep 5; done' ]
      containers:
        - name: validation
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          env:
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-openai-secret
                  key: OPENAI_API_KEY
            - name: LOKI_URL
              valueFrom:
                configMapKeyRef:
                  key: LOKI_URL
                  name: common-config
            - name: MANAGEMENT_ZIPKIN_TRACING_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  key: MANAGEMENT_ZIPKIN_TRACING_ENDPOINT
                  name: common-config
            - name: SPRING_CONFIG_IMPORT
              value: "optional:configserver:http://configserver.default.svc.cluster.local:{{ .Values.configserver.port }}"
          ports:
            - containerPort: {{ .Values.service.port }}
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 60
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 60
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}
spec:
  selector:
    app: validation
  ports:
    - protocol: TCP
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
data:
# Add additional configurations if necessary
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-openai-secret
type: Opaque
data:
  OPENAI_API_KEY: {{ required "The OpenAI API Key is required!" .Values.secrets.openaiApiKey | quote }}
